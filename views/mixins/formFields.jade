include ./file

mixin fieldFooter(information, error)
	- if (information)
		span.description=information
	- if (error)
		p.error-description #{error}

mixin booleanField(type, class, label, name, checked, required, error, information)
	label(class=(error !== undefined ? 'error ' : '') + class)
		strong #{label}
			- if (required)
				abbr(title='#{ (required == true ? 'This field is required' : required) }') *
		input(name='#{name}', type='#{type}', value='on', checked=(checked ? 'checked' : null))
		mixin fieldFooter(information, error)

mixin checkboxField(label, name, checked, required, error, information)
	mixin booleanField('checkbox', 'checkbox', label, name, checked, required, error, information)

mixin checkboxFieldForObject(label, name, dataObject, required, error, information)
	mixin booleanField('checkbox', 'checkbox', label, name, dataObject[name] === true, required, error[name], information)

mixin checkBoxGroup(label, name, dataObject, list)
	div.label.checkbox-group
		strong #{label}
		-each option in list
			label.checkbox
				input(name='#{name}', type='checkbox', value='#{option}', checked=(dataObject && dataObject.indexOf(option) !== -1))
				span=option

mixin radioField(label, name, checked, error)
	mixin booleanField('radio', 'radio', label, name, checked, required, error, information)

mixin inputField(type, class, label, name, value, required, error, maxLength, information, placeholder)
	label(class=error && 'error')
		strong #{label}
			- if (required)
				abbr(title='#{ (required == true ? 'This field is required' : required) }') *
		input(class=class, name='#{name}', type='#{type}', value='#{value || ''}', placeholder=placeholder, maxlength=maxLength)
		mixin fieldFooter(information, error)

mixin fileField(class, label, name, value, required, error, information)
	label(class=error && 'error')
		strong #{label}
			- if (required)
				abbr(title='#{ (required == true ? 'This field is required' : required) }') *
		input(class=class, name='#{name}', type='file', multiple='multiple')
		mixin fieldFooter(information, error)
	mixin downloadLink(value, true)
	- if (value)
		input(type='hidden', name='current-#{name}', value=typeof value === 'object' ? JSON.stringify(value) : value)

mixin fileFieldForObject(label, name, dataObject, required, errors, maxLength, information, placeholder)
	mixin fileField('file', label, name, dataObject[name], required, errors[name], information)

mixin textField(label, name, value, required, error, maxLength, information, placeholder)
	mixin inputField('text', 'textbox', label, name, value, required, error, maxLength, information, placeholder)

mixin textFieldForObject(label, name, dataObject, required, errors, maxLength, information, placeholder)
	mixin textField(label, name, dataObject[name], required, errors[name], maxLength, information, placeholder)

mixin passwordField(label, name, value, required, error, maxLength, information, placeholder)
	mixin inputField('password', 'textbox', label, name, value, required, error, maxLength, information, placeholder)

mixin passwordFieldForObject(label, name, dataObject, required, errors, maxLength, information, placeholder)
	mixin passwordField(label, name, dataObject[name], errors[name], maxLength, information, placeholder)

mixin textboxField(class, label, name, value, required, error, maxLength, information)
	label(class=error && 'error')
		strong #{label}
			- if (required)
				abbr(title='#{ (required == true ? 'This field is required' : required) }') *
		textarea(class=class, name='#{name}')=value
		mixin fieldFooter(information, error)

mixin textboxFieldForObject(class, label, name, dataObject, required, error, maxLength, information)
	mixin textboxField(class, label, name, dataObject[name], required, errors[name], maxLength, information)

//- Don't use this directly. Use dropdown or listbox
mixin selectField(class, label, name, value, required, error, list, information, multiple)
	label(class=error && 'error')
		strong #{label}
			- if (required)
				abbr(title='#{ (required == true ? 'This field is required' : required) }') *
		- if (Array.isArray(list))
			select(class=class,name='#{name}', multiple=(multiple ? 'multiple' : null ))
				- each option in list
					option(selected=(option == value) ? 'selected' : null)=option
		- else
			select(class=class,name='#{name}')
				- each value, text in list
					option(value=value)=text

		mixin fieldFooter(information, error)


mixin listboxField(class, label, name, value, required, error, list, information)
	mixin selectField(class, label, name, value, required, error, list, information, true)

mixin dropdownField(class, label, name, value, required, error, list, information)
	mixin selectField(class, label, name, value, required, error, list, information, false)

mixin dropdownForObject(label, name, dataObject, required, errors, list)
	mixin dropdownField('dropdown', label, name, dataObject[name], required, errors[name], list)
